import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª—é—á–∏ –∏–∑ .env
API_KEY = os.getenv('UKRAINE_ALARM_API_KEY')
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_URL = "https://api.ukrainealarm.com/api/v3"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –≤ –£–∫—Ä–∞–∏–Ω–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/alerts - —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–≤–æ–≥–∏\n"
        "/regions - —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤\n"
        "/region [id] - —Ç—Ä–µ–≤–æ–≥–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä /region 5)"
    )

async def get_access_token() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        response = requests.post(
            f"{API_URL}/token",
            json={"apiKey": API_KEY},
            timeout=10
        )
        response.raise_for_status()
        return response.json()["accessToken"]
    except Exception as e:
        logger.error(f"Token error: {e}")
        raise

async def alerts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥"""
    try:
        token = await get_access_token()
        headers = {"Authorization": f"Bearer {token}"}
        
        response = requests.get(
            f"{API_URL}/alerts",
            headers=headers,
            timeout=15
        )
        response.raise_for_status()
        
        alerts_data = response.json()
        if not alerts_data:
            await update.message.reply_text("üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –Ω–µ—Ç")
            return
            
        message = "üö® –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏:\n\n"
        for region in alerts_data:
            region_name = region.get("regionName", "N/A")
            alarms = region.get("alarms", [])
            if alarms:
                for alarm in alarms:
                    alarm_type = alarm.get("type", "UNKNOWN")
                    start_date = alarm.get("startDate", "N/A")
                    message += f"üìç {region_name}\n"
                    message += f"–¢–∏–ø: {alarm_type}\n"
                    message += f"–ù–∞—á–∞–ª–æ: {start_date}\n\n"
        
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Alerts error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def regions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    try:
        token = await get_access_token()
        headers = {"Authorization": f"Bearer {token}"}
        
        response = requests.get(
            f"{API_URL}/regions",
            headers=headers,
            timeout=15
        )
        response.raise_for_status()
        
        regions_data = response.json()
        message = "üìã –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤:\n\n"
        for region in regions_data:
            message += f"ID: {region['regionId']}\n"
            message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {region['regionName']}\n\n"
        
        await update.message.reply_text(message + "–ò—Å–ø–æ–ª—å–∑—É–π /region [id] –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    except Exception as e:
        logger.error(f"Regions error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤")

async def region_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É"""
    try:
        region_id = context.args[0] if context.args else None
        if not region_id:
            await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ ID —Ä–µ–≥–∏–æ–Ω–∞: /region [id]")
            return

        token = await get_access_token()
        headers = {"Authorization": f"Bearer {token}"}
        
        response = requests.get(
            f"{API_URL}/alerts/regions/{region_id}",
            headers=headers,
            timeout=15
        )
        response.raise_for_status()
        
        region_data = response.json()
        message = f"üîç –†–µ–≥–∏–æ–Ω: {region_data.get('regionName', 'N/A')}\n\n"
        
        alarms = region_data.get("alarms", [])
        if not alarms:
            message += "üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –Ω–µ—Ç"
        else:
            for alarm in alarms:
                alarm_type = alarm.get("type", "UNKNOWN")
                start_date = alarm.get("startDate", "N/A")
                message += f"–¢–∏–ø: {alarm_type}\n"
                message += f"–ù–∞—á–∞–ª–æ: {start_date}\n"
                if alarm.get("endDate"):
                    message += f"–ö–æ–Ω–µ—Ü: {alarm.get('endDate')}\n"
                message += "\n"
        
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Region alerts error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("alerts", alerts))
    application.add_handler(CommandHandler("regions", regions))
    application.add_handler(CommandHandler("region", region_alerts))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
